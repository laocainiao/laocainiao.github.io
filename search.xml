<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang1.7后请求中分号的处理</title>
      <link href="/2022/02/20/golang1-7%E5%90%8E%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%88%86%E5%8F%B7%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2022/02/20/golang1-7%E5%90%8E%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%88%86%E5%8F%B7%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>golang1.7之后对http请求的处理更加规范（限制更多了），例如对请求body中的分号”;”进行了限制，导致踩坑。<br>很早就想记录下这个问题，但是紧接着碰到春节就犯懒了，趁这个周末赶紧记录下。</p><h3 id="1-1、踩坑背景"><a href="#1-1、踩坑背景" class="headerlink" title="1.1、踩坑背景"></a>1.1、踩坑背景</h3><p>上手改造旧业务，原业务是php写的，为了提高平响和单机的qps，用golang重写了一遍，顺便在这个过程中了解整体业务。当然，简单的业务重写已经没有什么难度，整个过程非常顺利，完成了单测、自测以及qa的用例测试。<br>上线之后，切换了bfe的流量到新服务上，观测access日志有请求，然而业务日志却没有记录到响应的请求参数及响应结果。这让我心虎躯一震，赶紧切回原服务，排查原因。</p><h2 id="2、总有意外"><a href="#2、总有意外" class="headerlink" title="2、总有意外"></a>2、总有意外</h2><h3 id="2-1、调用姿势排查"><a href="#2-1、调用姿势排查" class="headerlink" title="2.1、调用姿势排查"></a>2.1、调用姿势排查</h3><p>在一切准备好以后，自以为万事大吉，但是总有意外。<br>旧接口的使用姿势有很多，参数可以放在url中通过get请求传递(通过data字段传递json字符串)，也可以放在post请求body中，所以没办法确定原先客户端是通过什么方式调用，只能一点点的找日志。</p><h2 id="2-2、get请求"><a href="#2-2、get请求" class="headerlink" title="2.2、get请求"></a>2.2、get请求</h2><p>第一时间查找到日志中有少量对该接口的get请求，查看日志后发现是通过url传递，但是copy出日志后发现golang报错了，那这一定是错误原因了。一解析，原来是golang已经不支持分号的解析了，那好办，在参数处理中自己加上字符替换就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// golang 1.17版本后不支持url中携带分号，需要人为进行替换</span><br><span class="line">req.HTTPRequest().URL.RawQuery = strings.Replace(req.HTTPRequest().URL.RawQuery, &quot;;&quot;, &quot;%3B&quot;, -1) </span><br></pre></td></tr></table></figure><h3 id="2-2、post请求"><a href="#2-2、post请求" class="headerlink" title="2.2、post请求"></a>2.2、post请求</h3><p>继续观察日志，还有content-type=application/x-www-form-urlencoded 的请求，那继续扒请求下来测试，测试通过（这里博主用的是yapi和postman进行测试）。</p><h3 id="2-3、第二次上线"><a href="#2-3、第二次上线" class="headerlink" title="2.3、第二次上线"></a>2.3、第二次上线</h3><p>这次上线后，观测日志，post请求依旧没有记录到，这次就有点无从下手了。<br>在通过观察旧日志，确定测试的参数和姿势都没问题，并且确定我发出的请求可以到达服务，但是线上的业务请求却没有被正常解析。<br>最后破罐子破摔，把所有的post请求参数丢到json中，并且请求头还是content-type=application/x-www-form-urlencoded，竟然报错了。</p><h3 id="2-4、再次改进"><a href="#2-4、再次改进" class="headerlink" title="2.4、再次改进"></a>2.4、再次改进</h3><p>报错之后，通过打印请求参数，发现post请求中带着分号，在bindparams的时候依旧报参数不完整的错误，换句话说，问题于get请求时一样。那么推断处导致问题有2个因素</p><ul><li>客户端构造post请求时带有分号，并且是字符串</li><li>golang并不会解析post请求中的分号</li><li>所以类似get请求的处理方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 这里要考虑到ioutil.ReadAll只能读取一次，所以需要请求回写</span><br><span class="line">data, err := c.GetRawData()</span><br><span class="line">if err == nil &#123;</span><br><span class="line">    safeStr := strings.ReplaceAll(string(data), &quot;;&quot;, &quot;%3B&quot;)</span><br><span class="line">    c.Request.Body = ioutil.NopCloser(strings.NewReader(safeStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5、成功解决"><a href="#2-5、成功解决" class="headerlink" title="2.5、成功解决"></a>2.5、成功解决</h3><p>再一次上线，请求正常记录，问题得到解决。</p><h2 id="3、后续"><a href="#3、后续" class="headerlink" title="3、后续"></a>3、后续</h2><h3 id="3-1、其他接口正常"><a href="#3-1、其他接口正常" class="headerlink" title="3.1、其他接口正常"></a>3.1、其他接口正常</h3><p>出现问题后，也再一次排查了其他接口，为什么其他接口请求都正常？<br>原因很简单：其他接口的参数并没有用到分号，所以一切正常</p><h3 id="3-2、为什么测试能通过"><a href="#3-2、为什么测试能通过" class="headerlink" title="3.2、为什么测试能通过"></a>3.2、为什么测试能通过</h3><p>测试使用了postman和yapi，在选择 content-type=application/x-www-form-urlencoded ，会对body中的分号自动进行转义，所以怎么测试，最终的结果都是正常的。</p><h3 id="3-3、为什么单测和qa能通过"><a href="#3-3、为什么单测和qa能通过" class="headerlink" title="3.3、为什么单测和qa能通过"></a>3.3、为什么单测和qa能通过</h3><p>因为在单测和qa的用例中，都增加了参数处理，完美的错过了这个问题。</p><h2 id="4、结语"><a href="#4、结语" class="headerlink" title="4、结语"></a>4、结语</h2><p>问题找的虽然曲折，但是最终还是得到了解决。历史业务包袱也可以随着重写一点点得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书</title>
      <link href="/2022/01/15/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2022/01/15/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1、这是一本什么书"><a href="#1、这是一本什么书" class="headerlink" title="1、这是一本什么书"></a>1、这是一本什么书</h2><p>一本论述类的书，也是一本实用性质的书。这本书想要引导读者正确的阅读一本书，并且做到读者应尽的义务（承认书的内容或有根据的反驳书的内容或实地践行书中所说的内容）。 </p><p>作为一个看书慢的读者，笔者本人也需要提升一下自己看书的能力，碰巧度厂内网视频中推荐了这本书，阅读之后觉得对笔者看书有一些帮助，借由写这篇文章把读者的义务履行一下。</p><h2 id="2、书本纲要"><a href="#2、书本纲要" class="headerlink" title="2、书本纲要"></a>2、书本纲要</h2><p>这个段落下的内容均为书中主要内容，笔者经过自己理解之后做的梳理。</p><h3 id="2-1、阅读的前提"><a href="#2-1、阅读的前提" class="headerlink" title="2.1、阅读的前提"></a>2.1、阅读的前提</h3><h4 id="2-1-1、主动的阅读"><a href="#2-1-1、主动的阅读" class="headerlink" title="2.1.1、主动的阅读"></a>2.1.1、主动的阅读</h4><p>在所有内容开始之前，一定要学会主动的阅读，这是所有阅读技巧开始的前提。</p><p>那什么是主动的阅读呢?</p><p>我们大部分人在看书的时候是不是经常会有在读书的时候犯困或者开小差? 这已经属于被动阅读了，即使我们是主动的拿起书去看，但是我们并没有做到主动阅读。</p><p>所谓主动阅读，要求我们带着问题去阅读或者是带着与作者交流的想法去阅读，只有这样读者才可以从书中，从作者的口中学习到新知或者答案。</p><h4 id="2-1-2、做一个有自我要求的读者"><a href="#2-1-2、做一个有自我要求的读者" class="headerlink" title="2.1.2、做一个有自我要求的读者"></a>2.1.2、做一个有自我要求的读者</h4><p>阅读前，提出4个基本问题，笔者以读完本书为例做个回答：</p><ul><li>整体来说，这本书到底在谈些什么？<ul><li>例如：本书谈论如何阅读，如何从书中更好地找到答案</li></ul></li><li>作者细部说了什么，怎么说的？<ul><li>例如：作者分了读者素养、阅读层级、以及各个类型的书的阅读规则进行介绍</li></ul></li><li>这本书说得有道理吗？<ul><li>例如：笔者暂不做评价，因为笔者还没有完全实践书中提出的建议</li></ul></li><li>这本书跟你有什么关系？<ul><li>例如：笔者需要指导，从作者身上学到阅读书的技巧和能力或者是如果锻炼自己这方面的能力</li></ul></li></ul><h3 id="2-2、读书的四个层次"><a href="#2-2、读书的四个层次" class="headerlink" title="2.2、读书的四个层次"></a>2.2、读书的四个层次</h3><p>读书可以分为四个层级，每个层级又依赖上一个层级进行，具体如下：</p><ul><li>基础阅读</li><li>检视阅读</li><li>分析阅读</li><li>主题阅读</li></ul><h4 id="2-2-1、基础阅读"><a href="#2-2-1、基础阅读" class="headerlink" title="2.2.1、基础阅读"></a>2.2.1、基础阅读</h4><p>顾名思义，基础阅读是所有阅读层级里最基础的，也是最为必要的一个层级。每个人从幼儿园开始学习的就是基础阅读。</p><ul><li>幼儿园：阅读准备阶段，心智的成长及生理的成长（眼耳口鼻）</li><li>小学：认字阶段，在这个时期，我们认识了很多阅读需要有的基础知识</li><li>青少年~：字汇增长及运用，小学之后不断补充知识</li></ul><p>简而言之就是为了阅读做字汇和心智、生理的准备，这个时期已经能够阅读一些简单的文章。而看到这篇文章的读者相比已经有这方面的积累了。</p><h4 id="2-2-2、检视阅读"><a href="#2-2-2、检视阅读" class="headerlink" title="2.2.2、检视阅读"></a>2.2.2、检视阅读</h4><p>检视阅读的门槛：有熟练的基础阅读能力，不会在阅读是经常出现因为字汇问题中断的场景。</p><p>检视阅读的步骤</p><ul><li>有系统的略读或粗读，在脑海中形成书的大致印象<ul><li>先看书名页，如果有序就先看序</li><li>研究目录页，对书的整体架构做大体了解</li><li>检阅书中附有的索引，寻找书可能的大概内容和要点</li><li>阅读出版者的介绍</li><li>根据目录页，挑选你觉得跟主题有关的章节来看</li><li>打开书，随意翻看其中一两段或是连续几页，不要太多，不要忽略最后两三页</li></ul></li><li>粗浅的阅读<ul><li>略过看不懂的部分，理解看的懂的部分<ul><li>碰到很难读的书时，在检视阅读时应该采用这个方法，避免”知难而退“</li></ul></li></ul></li><li>阅读的速度<ul><li>不同的读物适用不同的速度，不能一味求快</li></ul></li><li>逗留与倒退<ul><li>避免在一句话断点五六次</li><li>避免返回上一句内容</li><li>上述两个能力需要矫正和锻炼</li></ul></li></ul><p>检视阅读对分析阅读、尤其是主题阅读有非常大的帮助。</p><h4 id="2-2-3、分析阅读"><a href="#2-2-3、分析阅读" class="headerlink" title="2.2.3、分析阅读"></a>2.2.3、分析阅读</h4><p>分析阅读是全书花最多的篇幅进行介绍的，内容很多。</p><h5 id="2-2-3-1、第一阶段-找出一本书在谈什么"><a href="#2-2-3-1、第一阶段-找出一本书在谈什么" class="headerlink" title="2.2.3.1、第一阶段 找出一本书在谈什么"></a>2.2.3.1、第一阶段 找出一本书在谈什么</h5><ul><li>清楚自己读的是哪一类书，越早知道越好，最好是在阅读开始之前<ul><li>小说、喜剧、科学、散文等</li><li>论说性书籍<ul><li>理论<ul><li>历史</li><li>科学</li><li>哲学</li><li>…</li></ul></li><li>实用</li></ul></li><li>学会从书名开始分类（不一定准确）</li></ul></li><li>使用一个单一的句子或几句话来叙述整本书的内容</li><li>将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体结构</li><li>找出作者要问的问题，或作者想要解决的问题</li></ul><h5 id="2-2-3-2、第二阶段-诠释一本书的内容"><a href="#2-2-3-2、第二阶段-诠释一本书的内容" class="headerlink" title="2.2.3.2、第二阶段 诠释一本书的内容"></a>2.2.3.2、第二阶段 诠释一本书的内容</h5><ul><li>达成共识，找出共通词汇，统一用词<ul><li>找出关键字</li><li>专门用语及特殊词汇</li><li>找出字义</li></ul></li><li>从重要的句子中抓出作者的重要主题</li><li>找出作者的论述，梳理前因后果，清晰作者的主张</li><li>确定作者已经解决了哪些问题，还有哪些问题没有解决。同时确定哪些问题是作者自己无法解决的</li></ul><h5 id="2-2-3-3、第三阶段-评论一本书"><a href="#2-2-3-3、第三阶段-评论一本书" class="headerlink" title="2.2.3.3、第三阶段 评论一本书"></a>2.2.3.3、第三阶段 评论一本书</h5><ul><li>除非你能诠释整本书，否则不要轻易批评</li><li>不要争强好胜，非辩到底不可</li><li>在评论之前，要证明自己能区分出真正的知识和个人观点的不同</li><li>批评观点的特别标准<ul><li>证明作者的知识不足</li><li>证明作者的知识错误</li><li>证明作者不合逻辑</li><li>证明作者的分析与理由是不完整的</li></ul></li></ul><h5 id="2-2-3-4、辅助阅读"><a href="#2-2-3-4、辅助阅读" class="headerlink" title="2.2.3.4、辅助阅读"></a>2.2.3.4、辅助阅读</h5><p>书中辅助阅读单独设立了一个章节说明，辅助阅读其实是分析阅读的一个辅助手段，在进行分析阅读时，通过辅助阅读可以帮助我们更好的完成分析阅读，辅助阅读常见的有：</p><ul><li>字典</li><li>工具书</li><li>百科全书</li></ul><p>上述各类辅助阅读的书籍可以帮助我们了解更多分析阅读的书中的真实情况，而非作者一家之言。</p><h5 id="2-2-3-5、阅读不同读物的方法"><a href="#2-2-3-5、阅读不同读物的方法" class="headerlink" title="2.2.3.5、阅读不同读物的方法"></a>2.2.3.5、阅读不同读物的方法</h5><p>这个章节是作者特地列举的，但是笔者认为，这个章节最主要的除了说明不同作品的阅读速度之外，其余的方法与论说性作品分析阅读方法差异不大，不做过多说明。</p><p>重点说一下 小说、喜剧这类的数据，阅读速度应该尽量快，越快的阅读可以更好地沉浸在作者构造的虚拟世界，从而跟作者达到同频，感受人物的喜怒哀乐。</p><h4 id="2-2-4、主题阅读"><a href="#2-2-4、主题阅读" class="headerlink" title="2.2.4、主题阅读"></a>2.2.4、主题阅读</h4><h5 id="2-2-4-1、观察研究范围：主题阅读的准备阶段"><a href="#2-2-4-1、观察研究范围：主题阅读的准备阶段" class="headerlink" title="2.2.4.1、观察研究范围：主题阅读的准备阶段"></a>2.2.4.1、观察研究范围：主题阅读的准备阶段</h5><ul><li>根据主题，查找所有可能的书目</li><li>浏览书目列表，确定哪些与主题相关</li></ul><h5 id="2-2-4-2、主题阅读：阅读第一阶段的书目"><a href="#2-2-4-2、主题阅读：阅读第一阶段的书目" class="headerlink" title="2.2.4.2、主题阅读：阅读第一阶段的书目"></a>2.2.4.2、主题阅读：阅读第一阶段的书目</h5><ul><li>浏览所有第一阶段确定的书目，找出相关章节（准备阶段和这个环节，检视阅读的作用非常大）</li><li>根据主题创建中立的词汇<ul><li>因为不同作者的说法和用词，所以要建立读者自己的词汇库</li></ul></li><li>建立一个中立的主旨，列出一连串的问题<ul><li>提出的问题，可以从不同的书中寻找答案</li><li>类似于一场各个作者参加的讨论会</li></ul></li><li>界定主要及次要的议题</li><li>分析这些讨论，分清主次</li></ul><h5 id="2-2-4-3、笔者对主题阅读的理解"><a href="#2-2-4-3、笔者对主题阅读的理解" class="headerlink" title="2.2.4.3、笔者对主题阅读的理解"></a>2.2.4.3、笔者对主题阅读的理解</h5><p>主题阅读是四个阅读层级中最困难的，需要在质量参差不齐的作者和书籍中进行分辨筛选，最后再从中找出主旨和答案，对读者有非常高的要求。</p><p>要完成主题阅读，笔者认为读者应该有非常丰富的检视阅读与分析阅读的基础上进行。笔者在阅读这本书的时候，真的好像作者是在跟我对话，告诉我这个阶段要怎么做，下个阶段要怎么做。但是此时的笔者并不能很好的判断作者说法的准确性，针对读书这个主题，笔者还做的远远不到位，笔者唯一能做的就是实践及自我进华。</p><h2 id="3、读后感"><a href="#3、读后感" class="headerlink" title="3、读后感"></a>3、读后感</h2><p>书中说，在没有完全理解一本书时最好暂缓对书的评论，笔者认为自己现在还不能很好的评价这本书。但是笔者在阅读时，几乎是完全按照作者的思路去进行的，换句话说，笔者完全接收作者的建议，并且逐步在进行实践。也许过段时间回过头笔者会有新的想法可以去反驳作者的观点。</p><p>再说一下阅读这本书时的一些感受，作者的观点前面已经说了，笔者是非常认同的。但是作者在撰写这本书的时候，有时候过于在意论点的支撑，经常举一些无关紧要的例子，特别容易让笔者忘记相关的主题，需要重复的去温习主题。写这篇文章同样也是为了温习与巩固。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN闲谈二-计费</title>
      <link href="/2022/01/09/CDN%E9%97%B2%E8%B0%88%E4%BA%8C-%E8%AE%A1%E8%B4%B9/"/>
      <url>/2022/01/09/CDN%E9%97%B2%E8%B0%88%E4%BA%8C-%E8%AE%A1%E8%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="1、CDN计费方式有哪些"><a href="#1、CDN计费方式有哪些" class="headerlink" title="1、CDN计费方式有哪些"></a>1、CDN计费方式有哪些</h2><p>主要是帮助一些刚开始使用CDN的同学不要在费用上被坑。续接上文，继续来说一下CDN计费相关的内容，也是笔者比较熟悉的部分。</p><h3 id="1-1、什么流量、带宽"><a href="#1-1、什么流量、带宽" class="headerlink" title="1.1、什么流量、带宽"></a>1.1、什么流量、带宽</h3><p>笔者就用自己理解说一下</p><ul><li><p>流量</p><ul><li>换个说法：就是所有下载文件大小的总和。 比如一个文件 5G，那么所产生的的流量就是5G</li><li>实际中，CDN运营商所采集到的流量与文件实际大小不一定完全一致，由于tcp重传机制会导致产生的流量大于文件实际大小</li><li>流量单位： Byte、KByte、MByte、GByte、TByte…</li></ul></li><li><p>带宽</p><ul><li>单位时间内的 流量 / 时间，就类似于 速度 = 总路程 / 时间</li><li>带宽是表示访问时 速度的单位</li><li>带宽单位： bps、kbps、mbps、gbps</li><li>所谓bps，就是 bit persecond，意思为 每秒的比特数</li><li>CDN的带宽计费中，单位时间通常是1分钟、5分钟（单位不可能到1小时甚至一天，否则CDN产商会亏本，这个后面会再提一下）</li><li>Byte与bit的换算<ul><li>Byte * 8 = bit</li></ul></li></ul></li></ul><h3 id="1-2、CDN的计费值计算方式（计费方式）"><a href="#1-2、CDN的计费值计算方式（计费方式）" class="headerlink" title="1.2、CDN的计费值计算方式（计费方式）"></a>1.2、CDN的计费值计算方式（计费方式）</h3><ul><li>95带宽计费<ul><li>计算所有带宽点，从小到大排序，取低 （95% * 带宽点总数） + 1 的带宽 / 整月天数 * 当月实际使用天数</li><li>实际计算时，是从大到小排序，直接取  5% * 带宽点总数 的带宽 / 整月天数 * 当月实际使用天数<ul><li>实际计算从大到小计算，是因为实际的数据点为0时可能会直接漏过那个数据点，导致需要补点，而从大到小计算则不需要补点   </li></ul></li></ul></li><li>带宽第四峰值（去三峰）<ul><li>按天计算每日带宽，从大到小排序，取第四大的带宽值 / 整月天数 * 当月实际使用天数</li></ul></li><li>带宽日峰值均值<ul><li>按天计算每日带宽，将计费周期内的每日带宽 / 整月天数 * 当月实际使用天数</li></ul></li><li>流量<ul><li>将计费周期内的所有流量进行累加</li></ul></li><li>请求数、pv数等<ul><li>将计费周期内所有的请求数等数据累加</li></ul></li></ul><h3 id="1-3、-带宽计算时为什么需要按天折算"><a href="#1-3、-带宽计算时为什么需要按天折算" class="headerlink" title="1.3、 带宽计算时为什么需要按天折算"></a>1.3、 带宽计算时为什么需要按天折算</h3><p>这个问题非常容易踩坑，为什么流量和请求数的计费方式不需要按天折算，但是涉及到带宽的计费方式，都需要进行折算？</p><p>这个其实可以从带宽和流量的定义看出来。</p><ul><li>流量是用量的单位</li><li>带宽是速度的单位<br>也就是说，用量可以叠加累计，用多少算多少。但是速度不同，用1天与用30天的速度都是接近的。</li></ul><p>举个例子：</p><blockquote><p>A购买了半个月的CDN加速服务，周期是15天</p><p>B购买了半个月的CDN加速服务，周期是一个月（30天）</p><p>A和B的带宽都是一致的，10mbps，单价也都是15元/mbps</p><p>在月底结算时，A收费是 10 * 15 / 30 * 15； </p><p>B收费则是 10 * 15 / 30 * 30 = 10 * 15</p></blockquote><p>从例子中可以看出来，如果A不进行则算，他使用15天的费用跟使用30天的费用将是一样的。</p><h3 id="1-4、哪一种计费算法划算"><a href="#1-4、哪一种计费算法划算" class="headerlink" title="1.4、哪一种计费算法划算"></a>1.4、哪一种计费算法划算</h3><p>其实计费方式一直在减少，远比我上面列的多得多，但是CDN发展到今天，很多企业客户已经有了自己的偏好的计费方式。大部分用户还是偏好使用95带宽或者是流量。</p><p>至于选择95带宽计费还是流量计费，则是根据自己的业务特性去定，比如单位时间内的带宽不高，但是流量累加很大，则可以使用带宽计费。</p><p>为什么大家偏爱95，而不选择其他的带宽计费方式？ 因为95计费等于是将带宽突发等一些列的情况抹除，并且还有免费的带宽使用。</p><p>举个极端的例子，某个用户的业务特性就是每个月只用36个小时的CDN，如果95计费的情况下，这个用户将直接免费使用CDN服务。</p><h2 id="2、计费粒度"><a href="#2、计费粒度" class="headerlink" title="2、计费粒度"></a>2、计费粒度</h2><h3 id="2-1、什么是计费粒度"><a href="#2-1、什么是计费粒度" class="headerlink" title="2.1、什么是计费粒度"></a>2.1、什么是计费粒度</h3><p>计费粒度其实就是计算带宽时的单位时间，如上面所说，区分了</p><ul><li>1分钟 – 60s</li><li>5分钟 – 300s</li></ul><h3 id="2-2、为什么不区分天粒度带宽"><a href="#2-2、为什么不区分天粒度带宽" class="headerlink" title="2.2、为什么不区分天粒度带宽"></a>2.2、为什么不区分天粒度带宽</h3><p>其实标题的不区分天粒度带宽是不准确的，实际在看带宽图时是可以区分天粒度的带宽的，只是计费时不会使用天粒度的带宽。</p><p>计费时不使用天粒度的带宽是CDN运营商基于成本的考虑，天粒度的带宽趋势过于平缓，往往会将高点的带宽拉平，导致计费收不到多少钱。</p><h3 id="2-3、哪种计费粒度划算"><a href="#2-3、哪种计费粒度划算" class="headerlink" title="2.3、哪种计费粒度划算"></a>2.3、哪种计费粒度划算</h3><p>这里我可以直接给出结论：5分钟粒度在大部分情况下远比1分钟粒度划算，原理类似于天粒度带宽不作为计费。</p><h2 id="3、是否含父"><a href="#3、是否含父" class="headerlink" title="3、是否含父"></a>3、是否含父</h2><h3 id="3-1、什么是含父"><a href="#3-1、什么是含父" class="headerlink" title="3.1、什么是含父"></a>3.1、什么是含父</h3><p>本来以为自己在上一篇中讲了CDN的基础结构，回去看了一下，发现没有。</p><p>其实CDN的缓存服务器架设是多层级的，当然主要还是看不同公司是如何架设缓存服务器的，大部分CDN公司为了缓解源站的压力，会在边缘节点的上一级再架设一层缓存服务器，如果边缘节点没有命中，则优先访问上一层的缓存，上一层没命中才继续回源。</p><p>标题中的是否含父则代表的是从边缘节点到上一层级节点产生的带宽用量，这部分用量是否对用户计费。</p><h3 id="3-2、是否含父规则"><a href="#3-2、是否含父规则" class="headerlink" title="3.2、是否含父规则"></a>3.2、是否含父规则</h3><p>计费值是否含父，是使用者与CDN运营商约定，并签订在合同中的，如果合同中没有约定，我相信大部分的CDN运营商会默认含父计费。</p><p>但是CDN行业的竞争越来越激烈，并且行业有很多企业越来越创新和良心，已经逐步在取消含父计费，给到使用者的都是不含父计费。</p><h3 id="3-3、为什么要讨论是否含父"><a href="#3-3、为什么要讨论是否含父" class="headerlink" title="3.3、为什么要讨论是否含父"></a>3.3、为什么要讨论是否含父</h3><p>因为在笔者看来，含父计费的本不应该向使用者收费，因为父成本的产生，是由于CDN运营商自身架构导致（当然这个架构比较合理）。即便如此，这个产生的费用也不是使用者预期内的费用，所以是否含父笔者觉得还是有必要进行科普。</p><h2 id="4、-闲忙时"><a href="#4、-闲忙时" class="headerlink" title="4、 闲忙时"></a>4、 闲忙时</h2><p>闲忙时这个东西目前在行业内不算正式，但是也有。其实就是闲时与忙时的带宽价格区分开单独计费，闲时使用的带宽便宜些，忙时的带宽贵一些。</p><p>具体的闲忙时时段可以在商务上进行沟通，能否谈下来也是见仁见智的。</p><h2 id="5、期望"><a href="#5、期望" class="headerlink" title="5、期望"></a>5、期望</h2><p>希望有CDN的使用者不要在计费上吃亏。</p><p>今天是周天，看了2小时书突然想起来之前还有CDN的文章后续要写，就赶紧来写一下。</p><p>还有CDN的成本以及运营，考虑笔者本身之前虽然负责相关系统研发，但是没有过多去干预成本优化的工作，这里再去深入讲解成本和运营不太专业，所以如果有想了解的可以通过留言联系笔者进行沟通。</p><p>成本的计费方式与收入的计费方式差不多，CDN的成本主要是如果优化成本上。</p><h2 id="6、结论"><a href="#6、结论" class="headerlink" title="6、结论"></a>6、结论</h2><p>最后，再给读者们一个结论，CDN怎么计费比较划算呢？</p><ul><li>95带宽计费或流量计费</li><li>5分钟粒度</li><li>不含父</li><li>尽量谈闲忙时区分计费（计费会更加复杂）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN闲谈</title>
      <link href="/2021/12/26/CDN%E9%97%B2%E8%B0%88/"/>
      <url>/2021/12/26/CDN%E9%97%B2%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-为什么写这个文章"><a href="#1、-为什么写这个文章" class="headerlink" title="1、 为什么写这个文章"></a>1、 为什么写这个文章</h2><p>写这篇文章的起因是想把之前工作学习到的内容都记录下来，深究下有下几个原因：</p><ol><li>CDN涉及的知识点比较多，从技术到业务，可以先做个记录</li><li>很多业务知识想沉淀，虽然离开这个行业，但是很多经验可以复用</li><li>给更多有CDN消费需求的同学做下指引</li></ol><p>再说一下本人，在独立第三方CDN服务商企业工作四年半，主要负责公司各类运营侧的系统研发。这里不得不感谢老东家，老东家推崇无边界、不对自己设限，这样的环境帮助我养成了了解上下游业务情况的习惯。</p><h2 id="2、-请求从发起到看到结果"><a href="#2、-请求从发起到看到结果" class="headerlink" title="2、 请求从发起到看到结果"></a>2、 请求从发起到看到结果</h2><p>作者在校招进老东家的时候，甚至今年面试腾讯，都碰到下面这个问题：</p><blockquote><p>用户从浏览器的地址栏输入网址，按下回车之后到界面展示出结果，背后都经历了什么</p></blockquote><p>只能说刚毕业时的作者太年轻，当时回答了</p><ul><li>tcp三次握手</li><li>http连接建立在tcp之上</li><li>http的不同请求</li><li>请求经过DNS解析</li><li>后端的web服务器如何运作服务</li><li>前端如何渲染界面</li><li>tcp四次挥手</li><li>考虑到面试的是CDN公司，简单的回答如果接入CDN，先从CDN返回结果</li></ul><p>进入公司之后，才发现坐着只是简单的回答了框架，可能也就20%~30%，作为一家CDN公司，非常看重成员对网络流程的理解，其实上面的回答可以继续深入</p><ul><li>本地的host解析，getHostByName的系统调用</li><li>DNS分为localDNS、根域服务器、顶级域名服务器</li><li>网络的路由转跳</li><li>CDN的多级缓存，回源</li></ul><p>上面举了一些可以深入的例子，也是作者再进入公司后，实习期和试用期逐步了解起来的。</p><p>说了这么多，其实还是想引出来，CDN其实可以算是现在网络中的基建，网友现在的衣食住行离不开流行的app之外，也离不开CDN，就比如大家经常刷的抖音，背后就有大量的CDN服务在做支持。</p><h2 id="3、-CDN基本概念"><a href="#3、-CDN基本概念" class="headerlink" title="3、 CDN基本概念"></a>3、 CDN基本概念</h2><blockquote><p>内容分发网络（Content Delivery Network，简称CDN）是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。</p></blockquote><p>上面的引用是百度上到处可以找到的解释，如果是有想用CDN的同学，我想可以不用再详细说这块的内容了。</p><p>再简单总结下CDN是干啥的</p><ol><li>CDN供应商将要访问的内容缓存到物理位置离用户最近的服务器上</li><li>用户访问目标资源，DNS通过用户IP定位用户所在区域</li><li>根据用户所在区域，找到该区域缓存服务器，并返回给用户</li><li>用户通过拿到的服务器IP，进行服务访问</li></ol><p>这上面的描述当然是尽量精简过的，如果还需要详细了解，可以参照标题2的内容进行深入了解。</p><h2 id="4、-CDN涉及到的开源软件"><a href="#4、-CDN涉及到的开源软件" class="headerlink" title="4、 CDN涉及到的开源软件"></a>4、 CDN涉及到的开源软件</h2><ol><li>Bind–提供name服务</li><li>Nginx–提供7层负载均衡的能力</li><li>Squid–提供缓存服务的能力</li><li>Lvs–提供4层负载均衡的能力<br>上面这些，除了lvs，其他三个基本是CDN常用到的基础软件，但是上面的软件都比较旧，市场上有其他新的技术已经可以取代了，大家可以自己再去了解。</li></ol><p>这里就挑一个扩展说一下lvs的使用场景。其实简单的理解成做负载均衡是可以的，但是实际场景可以解决一些带宽突刺的问题。</p><p>由于localDNS没有参照下发的ttl时间进行ns记录的过期，会导致用户请求一直打到非预想的服务器上，这会导致CDN供应商的单服务器或单节点带宽突刺，带宽增高的影响</p><ul><li>服务器负载</li><li>节点成本</li></ul><p>这里就引入lvs，因为lvs可以挂在vip（这个vip当然不是very important person），是virtual ip，这样可以将vip返回给localDNS，这样即使ttl过期，CDN供应商自己替换vip下的服务器就可以解决带宽突刺</p><h2 id="5、-推荐的CDN服务提供商"><a href="#5、-推荐的CDN服务提供商" class="headerlink" title="5、 推荐的CDN服务提供商"></a>5、 推荐的CDN服务提供商</h2><p>上面简单介绍了下CDN，那国内好的CDN公司有哪些呢，其实我当然比较想推荐老东家啦，作为CDN服务商，老东家的质量和速度在早期确实在业界掀起一阵清流，pk也是无往不胜，其他厂商也是望尘莫及。</p><p>如果是个人用户，推荐云厂商</p><ul><li>阿里云</li><li>腾讯云</li></ul><p>如果是企业用户，推荐第三方服务商</p><ul><li>白山云</li><li>网宿科技</li></ul><p>本篇仅代表个人观点，如有错误或不同意见，欢迎留言指正和交流~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让心态平稳</title>
      <link href="/2021/11/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BF%83%E6%80%81%E5%B9%B3%E7%A8%B3/"/>
      <url>/2021/11/21/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BF%83%E6%80%81%E5%B9%B3%E7%A8%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h2><p>入职新公司两周多，这周新公司一个同一个入职的小伙伴突然问到我这边情况如何。由于跟他不在同一个base，平常也没什么交流，突然被这么问到也有点疑惑。于是追根溯源是他觉得那边太累，事情自己hold不住。经过一番撕扯后，才知道他过于焦虑，还是让他放平心态，毕竟境遇不同，没办法给他更多建议。  </p><p>现在许多人都很焦虑，身边的人不断在渲染着焦虑：小孩输在起跑线、结不起婚、养不起父母、赚不到钱等等。</p><p>“焦虑”–文章后续想要记录当前自己的看法以及心态。仅代表时下个人的看法。</p><h2 id="2、-根因"><a href="#2、-根因" class="headerlink" title="2、 根因"></a>2、 根因</h2><p>关于焦虑的文章确实也看过不少，许多文章无非就是劝大家努力；还有许多文章在卖毒鸡汤，某些人如何成功等等。但是真正能够解决焦虑的方法没有见到。</p><p>曾经一段时间，自己也陷入焦虑，后来解脱出来。如今回过头去看当时，才总结出来什么是焦虑。</p><blockquote><p>想要的太多，欲望太大，愿景太高以至于行动力下降，导致的恶性循环。 </p></blockquote><p>这么概括性说可能不太好理解，举个例子：比如现在就是想学一门简单的后端语言，但是学习这门语言之前，先开始幻想自己是一个架构师，然后开始做自己成为架构师之前的学习计划，列了一大堆的学习列表。列表输出之后，自己回顾列表，不知从何学起，想学的后端语言跟这些计划比，简直是九牛一毛，从而产生的恐惧导致行动力降低。</p><h2 id="3、-想要的"><a href="#3、-想要的" class="headerlink" title="3、 想要的"></a>3、 想要的</h2><p>这里说到想要的，其实每个人想要的都不一样。有的人希望多赚钱、有的人希望多享受生活、有的人希望多陪陪父母。每个人的人生经历决定了他的愿景。作者刚毕业的时候也没有想明白自己想要什么，也是在工作中经历了种种，才逐步探索出自己的方向。就像文章开头问到作者的那个同事，可以感觉出他还没有想明白自己想要的东西。</p><p>有了方向还不够，我们需要勇于及时止损，勇于去追求自己想用的东西。哪怕短期会出现不适应期，但是不要害怕，再往后的日子，你想要的东西一定会到来。</p><h2 id="4、-解决"><a href="#4、-解决" class="headerlink" title="4、 解决"></a>4、 解决</h2><h3 id="4-1、-活在当下（降低预期）"><a href="#4-1、-活在当下（降低预期）" class="headerlink" title="4.1、 活在当下（降低预期）"></a>4.1、 活在当下（降低预期）</h3><p>文章标题叫如何让心态平稳，其实本质是解决内心的焦虑，让自己回到正常的赛道上。解决焦虑最好的方法其实就是：活在当下。</p><p>活在当下可能在二十多年前是很容易的一件事情，但是在信息时代，这很难。每天打开新闻app、短视频app、网站，都能看到许多与我们无关的消息。例如：</p><blockquote><p>今天涨薪五千，但是在短视频里看到应届生薪资达到xxx万元，经过对比发现自己还不如应届生，这时候焦虑自然而然就产生，这是人性的必然，人都爱比较。</p></blockquote><p>其实每个人都有自己的路要走，上面那个不太恰当的例子一样，应届毕业生有他们的人生，也许现在外界看到的是经过了许多学生努力的结果，也有一部分是社会发展、行业发展的必然走向。在看到应届生薪资的时候，还有许多传统行业的薪资比不上互联网，但是大家都还在岗位上兢兢业业。</p><p>作者本人是如何完成活在当下的呢？其实就是找到现在手上的事情，认真去做，认真达成；找到自己想学习的一个东西，认真去学习，花时间去达成自己的兴趣。先完成找状态，而后逐步提升学习效率，再做短期计划、中期计划等。有时候，我们真的需要抛开利益去做一些自己的事情。</p><p>我相信许多人工作之后就很少学习了，在互联网行业尤其如此。在我们年龄、薪资、经验增加的时候，其实还是要回过头好好回顾下自己是什么时候开始写下第一行hello world，又是为什么去学去写。其他行业的从业者也是如此，哪怕工作上已经没有学习成长的地方（几乎不可能），也可以找找自己的其他方向。毕竟生命不息，学习不止嘛。</p><h3 id="4-2、-相信自己"><a href="#4-2、-相信自己" class="headerlink" title="4.2、 相信自己"></a>4.2、 相信自己</h3><p>焦虑还因为自我存疑，不相信自己能够完成目标。这里作者自己的心态变化就是培养自信心。无论在哪个年龄段，人的潜力都是无穷的，我们可以学习、我们可以奋斗、我们可以为了目标付出各种努力。无关最后的结果，只是自己想达成。</p><p>人总是需要有一点小成就去激励自己，去提高自己的自信，让努力的过程显得不那么枯燥。所以今早开始活在当下，提升自信。</p><h3 id="4-3、-惯性"><a href="#4-3、-惯性" class="headerlink" title="4.3、 惯性"></a>4.3、 惯性</h3><p>这一点其实是上面两点达成之后的一种表现。作者相信，成功会有惯性。当你习惯于去成就任务、成就自己，在未来的日子里，碰到的任何挑战都将成功，或者说能成功的几率更大。因为养成了成功的惯性。这种惯性会促使变得更成功、更强大。</p><p>当然，失败也容易产生惯性，如果长期失败是非常受打击的。所以在当下，能够从小事、小任务、小的学习目标开始，让自己成功，那成功的概率就会更大。</p><h2 id="5、-祝福"><a href="#5、-祝福" class="headerlink" title="5、 祝福"></a>5、 祝福</h2><p>写到这里，想记录的也都说了。由于语文一直都不好，也不习惯写博客，可能有点乱。但还是希望对看到这篇文章的同学有帮助，都能摆脱焦虑，达成人生目标。</p>]]></content>
      
      
      <categories>
          
          <category> 工作生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次换工作</title>
      <link href="/2021/11/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8D%A2%E5%B7%A5%E4%BD%9C/"/>
      <url>/2021/11/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8D%A2%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-前言"><a href="#1、-前言" class="headerlink" title="1、 前言"></a>1、 前言</h2><p>离开了工作了接近四年半的公司，同时换了一座城市，再一次有了流浪的感觉。从零开始。</p><h2 id="2、-为什么离职"><a href="#2、-为什么离职" class="headerlink" title="2、 为什么离职"></a>2、 为什么离职</h2><p>原来的公司，无论是福利、发展对目前的我来说都足够。说到为什么离职，还是自己想跳出现在的舒适圈。由于四年多来一直在同一个团队，干着几个一样的系统，虽然有时会有新插入的项目需要做，但是基于对公司，对各个团队以及对业务的了解，可以说是上手就是三板斧，做得马马虎虎也能完成任务，但是无法突破自己变为优秀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我：经验算不算能力？  </span><br><span class="line"></span><br><span class="line">老板：经验算能力  </span><br><span class="line"></span><br><span class="line">我：默默的点了点头  </span><br></pre></td></tr></table></figure><p>有业务经验、有框架经验、有其他各类的经验，唯独缺少对自己愿景的追求；再者，所有的项目三板斧，能够为公司带来什么创新？在我看来无非就是业务推着公司前进，我只是负责业务落地，但是没办法做到用技术带动公司发展。</p><p>反思自己的缺点很久，至少在工作上是的，是不是只有这三板斧，根本没办法实现自己的突破。最后的答案就是：经验不完全是能力，经验纯粹是经验，我需要外部刺激。</p><p>所谓能力，应该能带动公司发展、行业发展、发现创新并实现创新。当然不否认经验对能力的加持，但是换个环境，真正生效的还是底层能力，与经验没有太大关系。</p><h2 id="3、-目标"><a href="#3、-目标" class="headerlink" title="3、 目标"></a>3、 目标</h2><p>毕业这四年多一直在做业务沉淀，学习总是抓一下放一下。心里总还是希望能追求技术，保持持续学习，最后能够带来技术创新。</p><p>从目前这个社会看，技术创新带动社会和经济的变革已经替代了商业模式带来的变革了。</p><p>希望自己在新的公司得到自己想要的，完善自己不足。跳出来的第一步就已经是突破。不要辜负这一次换工作的不适，努力。</p><h2 id="4、-最后"><a href="#4、-最后" class="headerlink" title="4、 最后"></a>4、 最后</h2><p>继续加油。</p>]]></content>
      
      
      <categories>
          
          <category> 工作生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
